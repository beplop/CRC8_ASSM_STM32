
DZ_1_PMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000000ec  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800021c  08000224  00010224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800021c  0800021c  00010224  2**0
                  CONTENTS
  4 .ARM          00000000  0800021c  0800021c  00010224  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800021c  08000224  00010224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800021c  0800021c  0001021c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000220  08000220  00010220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000224  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000224  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010224  2**0
                  CONTENTS, READONLY
 12 .debug_line   00000091  00000000  00000000  0001024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00000022  00000000  00000000  000102de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000012  00000000  00000000  00010300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000028  00000000  00000000  00010318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00000060  00000000  00000000  00010340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000020  00000000  00000000  000103a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000204 	.word	0x08000204

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000204 	.word	0x08000204

08000170 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
 	ldr		r0, =_estack
 8000170:	4822      	ldr	r0, [pc, #136]	; (80001fc <else_skip+0x1e>)
 	mov		sp, r0          			/* set stack pointer */
 8000172:	4685      	mov	sp, r0
//////////////////////////////////////////
	mov		r0, #0x0 @результат CRC8
 8000174:	f04f 0000 	mov.w	r0, #0
	mov		r1, #0x3 @количество элементов массива
 8000178:	f04f 0103 	mov.w	r1, #3
	mov		r2, #0x20000000  @указатель на начало строки
 800017c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000

	mov 	r3, #0x5
 8000180:	f04f 0305 	mov.w	r3, #5
	strb	r3, [r2], #1
 8000184:	f802 3b01 	strb.w	r3, [r2], #1
	mov		r3, #0x10
 8000188:	f04f 0310 	mov.w	r3, #16
	strb	r3, [r2], #1
 800018c:	f802 3b01 	strb.w	r3, [r2], #1
	mov 	r3, #0x15
 8000190:	f04f 0315 	mov.w	r3, #21
	strb	r3, [r2], #1
 8000194:	f802 3b01 	strb.w	r3, [r2], #1

	mov		r2, #0x20000000
 8000198:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000

	bl 		calc_CRC8
 800019c:	f000 f801 	bl	80001a2 <calc_CRC8>

080001a0 <loop>:

	loop:
	b		loop
 80001a0:	e7fe      	b.n	80001a0 <loop>

080001a2 <calc_CRC8>:


	calc_CRC8:
	push	{r3, r4, r5, r6}
 80001a2:	b478      	push	{r3, r4, r5, r6}
	mov		r3, 0x0 @тут лежит data одной ячейки памяти
 80001a4:	f04f 0300 	mov.w	r3, #0
	mov		r4, 0x0 @crc8_value
 80001a8:	f04f 0400 	mov.w	r4, #0
	mov		r5, 0x0 @счетчик для for
 80001ac:	f04f 0500 	mov.w	r5, #0
	mov		r6, 0x0 @промежуточная переменная для if
 80001b0:	f04f 0600 	mov.w	r6, #0
	ldr		r7, =0xFF
 80001b4:	f04f 07ff 	mov.w	r7, #255	; 0xff

080001b8 <while>:
		while:
		ldrb	r3, [r2], #1 @значение по адресу r2 в r3 и прибавить 1 к адресу
 80001b8:	f812 3b01 	ldrb.w	r3, [r2], #1
		eor		r4, r3 @xor значения ячейки в памяти
 80001bc:	ea84 0403 	eor.w	r4, r4, r3

080001c0 <for>:

			for:
				if:
				mov		r6, r4 @промежуточная переменная для if
 80001c0:	4626      	mov	r6, r4
				and		r6, #0x80
 80001c2:	f006 0680 	and.w	r6, r6, #128	; 0x80

				cmp		r6, #0x0
 80001c6:	2e00      	cmp	r6, #0
				it		eq
 80001c8:	bf08      	it	eq
				beq		else
 80001ca:	e006      	beq.n	80001da <else>

				lsl		r4, #1
 80001cc:	ea4f 0444 	mov.w	r4, r4, lsl #1
				and		r4, r7
 80001d0:	ea04 0407 	and.w	r4, r4, r7
				eor		r4, #0x7
 80001d4:	f084 0407 	eor.w	r4, r4, #7
				b		else_skip
 80001d8:	e001      	b.n	80001de <else_skip>

080001da <else>:

				else:
				lsl		r4, #1
 80001da:	ea4f 0444 	mov.w	r4, r4, lsl #1

080001de <else_skip>:

				else_skip:

			add		r5, 0x1 @увеличиваем счетчик
 80001de:	f105 0501 	add.w	r5, r5, #1

			cmp		r5, #0x8
 80001e2:	2d08      	cmp	r5, #8
			ite		eq
 80001e4:	bf0c      	ite	eq
			moveq	r5, #0x0
 80001e6:	2500      	moveq	r5, #0
			bne		for
 80001e8:	e7ea      	bne.n	80001c0 <for>

		sub		r1, #0x1
 80001ea:	f1a1 0101 	sub.w	r1, r1, #1

		cmp 	r1, #0x0
 80001ee:	2900      	cmp	r1, #0
		it		ne
 80001f0:	bf18      	it	ne
		bne		while
 80001f2:	e7e1      	bne.n	80001b8 <while>

		mov		r0, r4
 80001f4:	4620      	mov	r0, r4

		pop		{r3, r4, r5, r6}
 80001f6:	bc78      	pop	{r3, r4, r5, r6}

		bx		lr
 80001f8:	4770      	bx	lr
 80001fa:	0000      	.short	0x0000
 	ldr		r0, =_estack
 80001fc:	20005000 	.word	0x20005000

08000200 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000200:	e7fe      	b.n	8000200 <ADC1_2_IRQHandler>
	...

08000204 <_init>:
 8000204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000206:	bf00      	nop
 8000208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800020a:	bc08      	pop	{r3}
 800020c:	469e      	mov	lr, r3
 800020e:	4770      	bx	lr

08000210 <_fini>:
 8000210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000212:	bf00      	nop
 8000214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000216:	bc08      	pop	{r3}
 8000218:	469e      	mov	lr, r3
 800021a:	4770      	bx	lr
